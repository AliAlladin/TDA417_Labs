
/******************************************************************************
** DAT038, TDA417  Datastrukturer och algoritmer, LP2 2020
** Lab 3: Plagiarism detection
*******************************************************************************/

Name of lab group: Group 50
Group member A:    Ali Alladin
Group member B:    William Hugo
Group member C:    Elias Johansson


/******************************************************************************
** Task: Running the slow program
**
** 1. What is the complexity of findSimilarity?
**    Answer in terms of N, the total number of 5-grams in the input files.
**    Assume that the number of 5-grams that occur in more than one file
**    is a small constant - that is, there is not much plagiarised text.
******************************************************************************/

O(N^2)

The two loops that go through the file trees have a time complexity of O(D)
each and the two loops that go through n-gram arrays each have a time complexity
of O(K). This gives us a total time complexity of:

D*D*K*K = N*N = N^2


/******************************************************************************
** 2. How long did the program take on the 'small' and 'medium' directories?
**    Is the ratio between the times what you would expect, given the complexity?
**    Explain very briefly why.
*******************************************************************************/

small: 2,41 seconds
medium: 423,82 seconds

The amount of 5-grams increases by a factor of 10 for every directory (small
(N = 20,000), medium (N = 200,000)). The time on the other hand increased with
a factor greater than 100. This indicates that the complexity is quadratic.


/******************************************************************************
** 3. How long do you predict the program would take to run on
**    the 'huge' directory? Show your calculations.
*******************************************************************************/
The huge sample is 200 times bigger than the small sample. Since O(N^2) the
expected runtime would be the runtime of the small sample, 2,41s, times 200^2
which is around 27 hours.

If we use the medium sample instead, which the huge sample is 20 bigger than,
the expected runtime would be the runtime of the medium sample, 423 s, times 20^2
which is around 47 hours. This is because the calculated complexity is O(N^2).

From this we expect the runtime for the huge dataset to be roughly 27 hours< and
<47 hours.



/******************************************************************************
** Task: Using binary search trees
**
** 4. Which of the trees usually become unbalanced?
******************************************************************************/

The "files" tree is the most unbalanced.


/******************************************************************************
** 5 (optional). Is there a simple way to stop these trees becoming unbalanced?
******************************************************************************/

[...]


/******************************************************************************
** Task: Using scapegoat trees
**
** 6. Now what is the total complexity of buildIndex and findSimilarity?
**    Again, assume a total of N 5-grams, and a constant number of 5-grams
**    that occur in more than one file.
******************************************************************************/

buildIndex has the complexity O(N*logN). The first for-loop is O(d) and the second
is O(k). O(d) * O(k) = O(N). The call to put has the complexity O(logN). N since
there's not a lot of duplicate n-grams. The total complexity is therefore
O(N) * O(logN) = O(N*logN).

findSimilarity has the complexity O(N*logN). The first for-loop takes roughly
O(N) time since the number of n-grams that occur in multiple documents are small.
The second and third loops take constant time, O(1), since the number of n-grams
that occur in multiple documents are small. Contains takes O(logN) time since
ScapegoatTree is a form of BST. Then put is called once which takes O(logN) time.
The resulting complexity is then O(N)*O(1)*O(1)*2*O(logN) = O(N*logN).

So the total complexity of both methods is O(N*logN) + O(N*logN) = O(N*logN).


/******************************************************************************
** 7 (optional). What if the total similarity score is an arbitrary number S,
**               rather than a small constant?
******************************************************************************/

[...]



/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

Ali Alladin:  8 hours
William Hugo:  8 hours
Elias Johansson:  8 hours


/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

No


/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/

No


/******************************************************************************
** D. Describe any serious problems you encountered.                    
******************************************************************************/

Maintaining the invariant was challenging.


/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned 
**    from doing the assignment, and whether you enjoyed it.                                             
******************************************************************************/

[...]

