A software license is a legal instrument (usually by way of contract law, with or without printed material) governing the use or redistribution of software. Under United States copyright law, all software is copyright protected, in both source code and object code forms, unless that software was developed by the United States Government, in which case it cannot be copyrighted. Authors of copyrighted software can donate their software to the public domain, in which case it is also not covered by copyright and, as a result, cannot be licensed. 
A typical software license grants the licensee, typically an end-user, permission to use one or more copies of software in ways where such a use would otherwise potentially constitute copyright infringement of the software owner's exclusive rights under copyright.


Most distributed software can be categorized according to its license type (see table).
Two common categories for software under copyright law, and therefore with licenses which grant the licensee specific rights, are proprietary software and free and open-source software (FOSS). The distinct conceptual difference between the two is the granting of rights to modify and re-use a software product obtained by a customer: FOSS software licenses both rights to the customer and therefore bundles the modifiable source code with the software ("open-source"), while proprietary software typically does not license these rights and therefore keeps the source code hidden ("closed source").
In addition to granting rights and imposing restrictions on the use of copyrighted software, software licenses typically contain provisions which allocate liability and responsibility between the parties entering into the license agreement. In enterprise and commercial software transactions, these terms often include limitations of liability, warranties and warranty disclaimers, and indemnity if the software infringes intellectual property rights of anyone.
Unlicensed software outside the scope of copyright protection is either public domain software (PD) or software which is non-distributed, non-licensed and handled as internal business trade secret. Contrary to popular belief, distributed unlicensed software (not in the public domain) is fully copyright protected, and therefore legally unusable (as no usage rights at all are granted by a license) until it passes into public domain after the copyright term has expired. Examples of this are unauthorized software leaks or software projects which are placed on public software repositories like GitHub without a specified license. As voluntarily handing software into the public domain (before reaching the copyright term) is problematic in some jurisdictions (for instance the Law of Germany), there are also licenses granting PD-like rights, for instance the CC0 or WTFPL.


Many proprietary or open source software houses sell the SW copy with a license to use it. There isn't any transferring of ownership of the good to the user, which hasn't the warranty of a for life availability of the software, nor isn't entitled to sell, rent, give it to someone, copy or redistribute it on the Web. License terms and conditions may specify further legal clauses that users can't negotiate individually or by way of a consumer organization, and can uniquely accept or refuse, returning the product back to the vendor. This right can be effectively applied where the jurisdiction provides a mandatory time for the good decline right after the purchase (as in the European Union law), or a mandatory public advertisement of the license terms, so as to be made readable by users before their purchasing.
In the United States, Section 117 of the Copyright Act gives the owner of a particular copy of software the explicit right to use the software with a computer, even if use of the software with a computer requires the making of incidental copies or adaptations (acts which could otherwise potentially constitute copyright infringement). Therefore, the owner of a copy of computer software is legally entitled to use that copy of software. Hence, if the end-user of software is the owner of the respective copy, then the end-user may legally use the software without a license from the software publisher.
As many proprietary "licenses" only enumerate the rights that the user already has under 17 U.S.C. ยง 117, and yet proclaim to take rights away from the user, these contracts may lack consideration. Proprietary software licenses often proclaim to give software publishers more control over the way their software is used by keeping ownership of each copy of software with the software publisher. By doing so, Section 117 does not apply to the end-user and the software publisher may then compel the end-user to accept all of the terms of the license agreement, many of which may be more restrictive than copyright law alone. The form of the relationship determines if it is a lease or a purchase, for example UMG v. Augusto or Vernor v. Autodesk, Inc.The ownership of digital goods, like software applications and video games, is challenged by "licensed, not sold" EULAs of digital distributors like Steam. In the European Union, the European Court of Justice held that a copyright holder cannot oppose the resale of a digitally sold software, in accordance with the rule of copyright exhaustion on first sale as ownership is transferred, and questions therefore the "licensed, not sold" EULA. The Swiss-based company UsedSoft innovated the resale of business software and fought for this right in court. In Europe, EU Directive 2009/24/EC expressly permits trading used computer programs.



The hallmark of proprietary software licenses is that the software publisher grants the use of one or more copies of software under the end-user license agreement (EULA), but ownership of those copies remains with the software publisher (hence use of the term "proprietary"). This feature of proprietary software licenses means that certain rights regarding the software are reserved by the software publisher. Therefore, it is typical of EULAs to include terms which define the uses of the software, such as the number of installations allowed or the terms of distribution.
The most significant effect of this form of licensing is that, if ownership of the software remains with the software publisher, then the end-user must accept the software license. In other words, without acceptance of the license, the end-user may not use the software at all. One example of such a proprietary software license is the license for Microsoft Windows. As is usually the case with proprietary software licenses, this license contains an extensive list of activities which are restricted, such as: reverse engineering, simultaneous use of the software by multiple users, and publication of benchmarks or performance tests.
The most common licensing models are per single user (named user, client, node) or per user in the appropriate volume discount level, while some manufacturers accumulate existing licenses. These open volume license programs are typically called open license program (OLP), transactional license program (TLP), volume license program (VLP) etc. and are contrary to the contractual license program (CLP), where the customer commits to purchase a certain number of licenses over a fixed period (mostly two years). Licensing per concurrent/floating user also occurs, where all users in a network have access to the program, but only a specific number at the same time. Another license model is licensing per dongle, which allows the owner of the dongle to use the program on any computer. Licensing per server, CPU or points, regardless the number of users, is common practice, as well as site or company licenses. Sometimes one can choose between perpetual (permanent) and annual license. For perpetual licenses, one year of maintenance is often required, but maintenance (subscription) renewals are discounted. For annual licenses, there is no renewal; a new license must be purchased after expiration. Licensing can be host/client (or guest), mailbox, IP address, domain etc., depending on how the program is used. Additional users are inter alia licensed per extension pack (e.g. up to 99 users), which includes the base pack (e.g. 5 users). Some programs are modular, so one will have to buy a base product before they can use other modules.Software licensing often also includes maintenance. This, usually with a term of one year, is either included or optional, but must often be bought with the software. The maintenance agreement (contract) typically contains a clause that allows the licensee to receive minor updates (V.1.1 => 1.2), and sometimes major updates (V.1.2 => 2.0). This option is usually called update insurance or  upgrade assurance. For a major update, the customer has to buy an upgrade, if it is not included in the maintenance agreement. For a maintenance renewal, some manufacturers charge a reinstatement (reinstallment) fee retroactively per month, in the event that the current maintenance has expired. 
Maintenance sometimes includes technical support. When it does, the level of technical support, which are commonly named gold, silver and bronze, can vary depending on the communication method (i.e. e-mail versus telephone support), availability (e.g. 5x8, 5 days a week, 8 hours a day) and reaction time (e.g. three hours). Support is also licensed per incident as an incident pack (e.g. five support incidents per year).Many manufacturers offer special conditions for schools and government agencies (EDU/GOV license). Migration from another product (crossgrade), even from a different manufacturer (competitive upgrade) is offered.



There are several organizations in the FOSS domain who give out guidelines and definitions regarding software licenses. Free Software Foundation maintains non-exhaustive lists of software licenses following their The Free Software Definition and licenses which the FSF considers non-free for various reasons. The FSF distinguishes additionally between free software licenses that are compatible or incompatible with the FSF license of choice, the copyleft GNU General Public License. The Open Source Initiative defines a list of certified open-source licenses following their The Open Source Definition. Also the Debian project has a list of licenses which follow their Debian Free Software Guidelines.Free and open-source licenses are commonly classified into two categories: Those with the aim to have minimal requirements about how the software can be redistributed (permissive licenses), and the protective share-alike (copyleft Licenses).
An example of a copyleft free software license is the often used GNU General Public License (GPL), also the first copyleft license. This license is aimed at giving and protecting all users unlimited freedom to use, study, and privately modify the software, and if the user adheres to the terms and conditions of the GPL, freedom to redistribute the software or any modifications to it. For instance, any modifications made and redistributed by the end-user must include the source code for these, and the license of any derivative work must not put any additional restrictions beyond what the GPL allows.Examples of permissive free software licenses are the BSD license and the MIT license, which give unlimited permission to use, study, and privately modify the software, and includes only minimal requirements on redistribution. This gives a user the permission to take the code and use it as part of closed-source software or software released under a proprietary software license.
It was under debate some time if public domain software and public domain-like licenses can be considered as a kind of FOSS license. Around 2004 lawyer Lawrence Rosen argued in the essay "Why the public domain isn't a license" software could not truly be waived into public domain and can't therefore be interpreted as very permissive FOSS license, a position which faced opposition by Daniel J. Bernstein and others. In 2012 the dispute was finally resolved when Rosen accepted the CC0 as an open source license, while admitting that contrary to his previous claims, copyright can be waived away, backed by Ninth circuit decisions.

