A software patent is a patent on a piece of software, such as a computer program, libraries, user interface, or algorithm.


A patent is a set of exclusionary rights granted by a state to a patent holder for a limited period of time, usually 20 years. These rights are granted to patent applicants in exchange for their disclosure of the inventions. Once a patent is granted in a given country, no person may make, use, sell or import/export the claimed invention in that country without the permission of the patent holder. Permission, where granted, is typically in the form of a license which conditions are set by the patent owner: it may be free or in return for a royalty payment or lump sum fee.
Patents are territorial in nature. To obtain a patent, inventors must file patent applications in each and every country in which they want a patent. For example, separate applications must be filed in Japan, China, the United States and India if the applicant wishes to obtain patents in those countries. However, some regional offices exist, such as the European Patent Office (EPO), which act as supranational bodies with the power to grant patents which can then be brought into effect in the member states, and an international procedure also exists for filing a single international application under the Patent Cooperation Treaty (PCT), which can then give rise to patent protection in most countries.
These different countries and regional offices have different standards for granting patents. This is particularly true of software or computer-implemented inventions, especially where the software is implementing a business method.


On 21 May 1962, a British patent application entitled "A Computer Arranged for the Automatic Solution of Linear Programming Problems" was filed. The invention was concerned with efficient memory management for the simplex algorithm, and could be implemented by purely software means. The patent was granted on August 17, 1966 and seems to be one of the first software patents.


Most countries place some limits on the patenting of inventions involving software, but there is no one legal definition of a software patent. For example, U.S. patent law excludes "abstract ideas", and this has been used to refuse some patents involving software. In Europe, "computer programs as such" are excluded from patentability, thus European Patent Office policy is consequently that a program for a computer is not patentable if it does not have the potential to cause a "technical effect" which is by now understood as a material effect (a "transformation of nature"). Substantive law regarding the patentability of software and computer-implemented inventions, and case law interpreting the legal provisions, are different under different jurisdictions.
Software patents under multilateral treaties:

Software patents under TRIPs Agreement
Software patents under the European Patent Convention
Computer programs and the Patent Cooperation TreatySoftware patents under national laws:

Software patents under United States patent law
Software patents under United Kingdom patent law


In Australia, there is no particular exclusion for patents relating to software. The subject matter of an invention is patentable in Australia, if it is a manner of manufacture within the meaning of section 6 of the Statute of Monopolies. The High Court of Australia has refrained from ruling on the precise definition of manner of manufacture stating that any such attempt is bound to fail for the policy reason of encouraging national development in fields that may be unpredictable. In assessing whether an invention is a manner of manufacture, the High Court has relied on the inquiry of whether  the subject of the claims defining the invention has as its end result an artificially created state of affairs.In a decision of the Federal Court of Australia, on the patentability of an improved method of representing curved images in computer graphics displays, it was held that the application of selected mathematical methods to computers may involve steps which are foreign to the normal use of computers and hence amount to a manner of manufacture. In another unanimous decision by the Full Federal Court of Australia, an invention for methods of storing and retrieving Chinese characters to perform word processing was held to be an artificially created state of affairs and consequently within the concept of a manner of manufacture.Nevertheless, in a recent decision on the patentability of a computer implemented method of generating an index based on selection and weighing of data based on certain criterion, the Full Federal Court of Australia reaffirmed that mere methods, schemes and plans are not manners of manufacture. The Full Court went on to hold that the use of a computer to implement a scheme did not contribute to the invention or the artificial effect of the invention. The subject matter of the invention was held to be an abstract idea and not a manner of manufacture within the meaning of the term in the Patents Act. The same Full Federal Court in another decision regarding the patentability of an invention regarding a method  and system for assessing an individualâ€™s competency in relation to certain criterion, reiterated that a business method or mere scheme were per se are not patentable.In principle, computer software is still a valid patentable subject matter in Australia. But, in circumstances where patents have been sought over software to merely implement abstract ideas or business methods, the courts and the Commissioner of Patents have resisted granting patent protection to such applications both as a matter of statutory interpretation and policy.



In Canada, courts have held that the use of a computer alone neither lends, nor reduces patentability of an invention. However, it is the position of the Canadian Patent Office that where a computer is an "essential element" of a patent's claims, the claimed invention is generally patentable subject matter.



Within European Union member states, the EPO and other national patent offices have issued many patents for inventions involving software since the European Patent Convention (EPC) came into force in the late 1970s. Article 52 EPC excludes "programs for computers" from patentability (Art. 52(2)) to the extent that a patent application relates to a computer program "as such" (Art. 52(3)). This has been interpreted to mean that any invention that makes a non-obvious "technical contribution" or solves a "technical problem" in a non-obvious way is patentable even if that technical problem is solved by running a computer program.Computer-implemented inventions that only solve a business problem using a computer, rather than a technical problem, are considered unpatentable as lacking an inventive step (see T 258/03). Nevertheless, the fact that an invention is useful in business does not mean it is not patentable if it also solves a technical problem.
A summary of the developments concerning patentability of computer programs under the European Patent Convention is given in (see G 3/08) as a response of the Enlarged Board of Appeal to questions filed by the President of the European Patent Office according to Art. 112(1)b) EPC.
Concerns have been raised that the new (2015) Unified Patent Court will be much more open to patents generally and software patents in particular.


In April 2013, the German Parliament adopted a joint motion "against the growing trend of patent offices to grant patents on software programs".



United Kingdom patent law is interpreted to have the same effect as the European Patent Convention such that "programs for computers" are excluded from patentability to the extent that a patent application relates to a computer program "as such". Current case law in the UK states that an (alleged) invention will only be regarded as an invention if it provides a contribution that is not excluded and that is also technical. A computer program implementing a business process is therefore not an invention, but a computer program implementing an industrial process may well be.


In India, a clause to include software patents was quashed by the Indian Parliament in April 2005. However, following publication of the new guidelines on the examination of computer-related inventions on 19 February 2016, the Office of the Controller General of Patents, Designs and Trade marks accepts applications for software patents, as long as the software is claimed in conjunction with a novel hardware. On 30 June 2017, revised guidelines on the examination of computer related inventions were published. This 2017 guidelines provides clarity on patentability of software invention in India, ie., the claimed computer-related invention needs to be ascertained whether it is of a technical nature involving technical advancement as compared to the existing knowledge or having economic significance or both, and is not subject to exclusion under Section 3 of the Patents Act.


Software-related inventions are patentable. To qualify as an invention, however, there must be "a creation of technical ideas utilizing a law of nature" although this requirement is typically met by "concretely realising the information processing performed by the software by using hardware resources". Software-related inventions may be considered obvious if they involve the application of an operation known in other fields, the addition of a commonly known means or replacement by equivalent, the implementation in software of functions which were previously performed by hardware, or the systematisation of known human transactions.In 1999, the allowance rate for business method patents at the Japan Patent Office (JPO) reached an all-time high of roughly 35 percent. Subsequently, the JPO experienced a surge in business method patent filings. This surge was met with a dramatic decrease in the average grant rate of business method patents during the following six years; it lingered around 8 percent between 2003 and 2006 (8 percent is extremely low in comparison to the average of 50 percent across all technical fields). Since 2006, the average grant rate for business method patents has risen to the current rate of roughly 25 percent.


In New Zealand computer programs are to be excluded from patentability under a 2010 Patents Bill, but guidelines permitting embedded software are to be drafted once the bill has passed. From 2013 computer programs 'as such' are excluded from patentability. The as such wording rules out only those software based patents where novelty lies solely in the software. Similar to Europe.


In the Philippines, "schemes, rules and methods of performing mental acts, playing games or doing business, and programs for computers" are non-patentable inventions under Sec. 22.2 of Republic Act No. 8293, otherwise known as the "Intellectual Property Code of the Philippines".


In the Russian Federation according to article #1350 of the Civil Code of the Russian Federation the following do not qualify as inventions:

discoveries;
scientific theories and mathematical methods;
decisions concerning only the appearance of products and aimed at meeting the aesthetic needs;
the rules and methods of games, intellectual or economic activities;
computer programs;
decisions consisting only in the presentation of information.However, the article provides for that the patentability of these objects is excluded only in the case when the application for the grant of a patent for an invention concerns these objects as such.


In South Africa, "a program for a computer" is excluded from recognition as an invention by section 25(2) of the Patents Act. However, this restriction applies "only to the extent to which a patent or an application for a patent relates to that thing as such" and should not prevent, for example, a product, process, or method which may be implemented on a computer from being an invention, provided that the requirements of novelty and inventiveness are met.


In South Korea, software is considered patentable and many patents directed towards "computer programs" have been issued. In 2006, Microsoft's sales of its "Office" suite were jeopardized due to a possible patent infringement. A ruling by the Supreme Court of Korea found that patents directed towards automatic language translation within software programs were valid and possibly violated by its software.



The United States Patent and Trademark Office has granted patents that may be referred to as software patents since at least the early 1970s. In Gottschalk v. Benson (1972), the United States Supreme Court ruled that a patent for a process should not be allowed if it would "wholly pre-empt the mathematical formula and in practical effect would be a patent on the algorithm itself", adding that "it is said that the decision precludes a patent for any program servicing a computer. We do not so hold." In 1981, the Supreme Court stated that "a claim drawn to subject matter otherwise statutory does not become nonstatutory simply because it uses a mathematical formula, computer program, or digital computer" and a claim is patentable if it contains "a mathematical formula [and] implements or applies the formula in a structure or process which, when considered as a whole, is performing a function which the patent laws were designed to protect".Due to different treatment of federal patent rights in different parts of the country, in 1982 the U.S. Congress created a new court (the Federal Circuit) to hear patent cases. Following several landmark decisions by this court, by the early 1990s the patentability of software was well established, and in 1996 the USPTO issued Final Computer Related Examination Guidelines stating that "A practical application of a computer-related invention is statutory subject matter. This requirement can be discerned from the variously phrased prohibitions against the patenting of abstract ideas, laws of nature or natural phenomena" (emphasis added).The recent expansion of the Internet and e-commerce has led to many patents being applied for and being granted for business methods implemented in software and the question of whether business methods are statutory subject matter is a separate issue from the question of whether software is.  Critics of the Federal Circuit believe that the non-obviousness standard is partly responsible for the large increase in patents for software and business methods. There have been several successful enforcement trials in the United States, some of which are listed in the list of software patents article.



For the U.S., the purpose of patents is laid down in the constitutional clause that gives Congress the power "[t]o promote the progress of science and useful arts, by securing for limited times to authors and inventors the exclusive right to their respective writings and discoveries;" (Article I, Section 8, Clause 8). For Europe, there is no similar definition. Commonly four patent justification theories are recognised, as laid down for instance by Machlup in 1958, which include justice to the inventor and benefit for society by rewarding inventors. Disclosure is required in return for the exclusive right, and disclosure may promote further development. However, the value of disclosure should not be overestimated: some inventions could not be kept secret otherwise, and patents also prohibit independent reinventions to be exploited.
There is debate as to whether or not these aims are achieved with software patents.


In seeking to find a balance, different countries have different policies as to where the boundary between patentable and non-patentable software should lie. In Europe, a number of different proposals for setting a boundary line were put forward during the debate concerning the proposed Directive on the patentability of computer-implemented inventions, none of which were found acceptable by the various parties to the debate. Two particular suggestions for a hurdle that software must pass to be patentable include:

A computer program that utilises "controllable forces of nature to achieve predictable results".
A computer program which provides a "technical effect".In the US, Ben Klemens, a Guest Scholar at the Brookings Institution, proposed that patents should be granted only to inventions that include a physical component that is by itself nonobvious. This is based on Justice William Rehnquist's ruling in the U.S. Supreme Court case of Diamond v. Diehr that stated that "... insignificant postsolution activity will not transform an unpatentable principle into a patentable process." By this rule, one would consider software loaded onto a stock PC to be an abstract algorithm with obvious postsolution activity, while a new circuit design implementing the logic would likely be a nonobvious physical device. Upholding an "insignificant postsolution activity" rule as per Justice Rehnquist's ruling would also eliminate most business method patents.


A common objection to software patents is that they relate to trivial inventions. A patent on an invention that many people would easily develop independently of one another should not, it is argued, be granted since this impedes development.
Different countries have different ways of dealing with the question of inventive step and non-obviousness in relation to software patents. Europe uses an 'Inventive step test'; see the Inventive step requirement in Europe and, for instance, T 258/03.




There are a number of high-profile examples where the patenting of a data exchange standards forced another programming group to introduce an alternative format. For instance, the Portable Network Graphics (PNG) format was largely introduced to avoid the Graphics Interchange Format (GIF) patent problems, and Ogg Vorbis to avoid MP3. If it is discovered that these new suggested formats are themselves covered by existing patents, the final result may be a large number of incompatible formats. Creating such formats and supporting them costs money and creates inconvenience to users.



Under the EPC, and in particular its Article 52, "programs for computers" are not regarded as inventions for the purpose of granting European patents, but this exclusion from patentability only applies to the extent to which a European patent application or European patent relates to a computer program as such. As a result of this partial exclusion, and despite the fact that the EPO subjects patent applications in this field to a much stricter scrutiny when compared to their American counterpart, that does not mean that all inventions including some software are de jure not patentable.



Patent and copyright protection constitute two different means of legal protection which may cover the same subject-matter, such as computer programs, since each of these two means of protection serves its own purpose. Software is protected as works of literature under the Berne Convention. This allows the creator to prevent another entity from copying the program and there is generally no need to register code in order for it to be copyrighted.
Patents, on the other hand, give their owners the right to prevent others from using a claimed invention, even if it was independently developed and there was no copying involved. In fact, one of the most recent EPO decisions clarifies the distinction, stating that software is patentable, because it is basically only a technical method executed on a computer, which is to be distinguished from the program itself for executing the method, the program being merely an expression of the method, and thus being copyrighted.
Patents cover the underlying methodologies embodied in a given piece of software, or the function that the software is intended to serve, independent of the particular language or code that the software is written in. Copyright prevents the direct copying of some or all of a particular version of a given piece of software, but does not prevent other authors from writing their own embodiments of the underlying methodologies. Assuming a dataset meets certain criteria, copyright can also be used to prevent a given set of data from being copied while still allowing the author to keep the contents of said set of data a trade secret.Whether and how the numerus clausus principle shall apply to the legal hybrid software to provide a judicious balance between property rights of the title holders and freedom rights of computing professionals and the society as a whole, is in dispute.


There is a debate over the extent to which software patents should be granted, if at all. Important issues concerning software patents include:

Whether software patents should be allowed, and if so, where the boundary between patentable and non-patentable software should lie;
Whether the inventive step and non-obviousness requirement is applied too loosely to software; and
Whether patents covering software discourage, rather than encourage, innovation.
Whether Mathematical methods based software may be allowed if the mathematics or algorithm in question is complicated enough and may not be implemented with pencil and paper. 



There is strong dislike in the free software community towards software patents. Much of this has been caused by free software or open source projects terminating when the owners of patents covering aspects of a project demanded license fees that the project could not pay, or was not willing to pay, or offered licenses with terms that the project was unwilling to accept, or could not accept, because it conflicted with the free software license in use.Several patent holders have offered royalty-free patent licenses for a very small portion of their patent portfolios. Such actions have provoked only minor reaction from the free and open source software communities for reasons such as fear of the patent holder changing their mind or the license terms being so narrow as to have little use. Companies that have done this include Apple Inc, IBM, Microsoft, Nokia, Novell, Red Hat, and Sun Microsystems.In 2005 Sun Microsystems announced that they were making a portfolio of 1,600 patents available through a patent license called Common Development and Distribution License.In 2006, Microsoft's pledge not to sue Novell Linux customers, openSUSE contributors, and free/open source software developers over patents and the associated collaboration agreement with Novell was met with disdain from the Software Freedom Law Center
while commentators from the Free Software Foundation stated that the agreement would not comply with GPLv3. Meanwhile, Microsoft has reached similar agreements with Dell, Inc. and Samsung, due to alleged patent infringements of the GNU/Linux operating system. Microsoft has also derived revenue from Android by making such agreements-not-to-sue with Android vendors.


In the late 1990s, Unisys claimed to have granted royalty free licenses to hundreds of not-for-profit organizations that used the patented LZW compression method and, by extension, the GIF image format. However, this did not include most software developers and Unisys were "barraged" by negative and "sometimes obscene" emails from software developers.



Patenting software is widespread in the US. As of 2015, approximately 500,000 patents had issued in the 23 classes of patents covering "computer implemented inventions". (see table to the right).
Many software companies cross license their patents to each other. These agreements allow each party to practice the other party's patented inventions without the threat of being sued for patent infringement. Microsoft, for example, has agreements with IBM, Sun Microsystems (now Oracle Corporation), SAP, Hewlett-Packard, Siemens AG, Cisco, Autodesk and recently Novell. Microsoft cross-licensed its patents with Sun, despite being direct competitors, and with Autodesk even though Autodesk has far fewer patents than Microsoft.
The ability to negotiate cross licensing agreements is a major reason that many software companies, including those providing open source software, file patents. As of June 2006, for example, Red Hat has developed a portfolio of 10 issued US patents, 1 issued European patent, 163 pending US patent applications, and 33 pending international PCT (Patent Cooperation Treaty) patent applications. Red Hat uses this portfolio to cross license with proprietary software companies so that they can preserve their freedom to operate.Other patent holders are in the business of inventing new "computer implemented inventions" and then commercializing the inventions by licensing the patents to other companies that manufacture the inventions. Walker Digital, for example, has generated a large patent portfolio from its research efforts, including the basic patent on the Priceline.com reverse auction technology. US universities also fall into this class of patent owners. They collectively generate about $1.4 billion per year through licensing the inventions they develop to both established and start up companies in all fields of technology, including software.Still other patent holders focus on obtaining patents from original inventors and licensing them to companies that have introduced commercial products into the marketplace after the patents were filed. Some of these patent holders, such as Intellectual Ventures, are privately held companies financed by large corporations such as Apple, Microsoft, Intel, Google, etc. Others, such as Acacia Technologies, are publicly traded companies with institutional investors being the primary shareholders.The practice of acquiring patents merely to license them is controversial in the software industry. Companies that have this business model are pejoratively referred to as patent trolls. It is an integral part of the business model that patent licensing companies sue infringers that do not take a license. Furthermore, they may take advantage of the fact that many companies will pay a modest license fee (e.g. $100,000 to $1,000,000) for rights to a patent of questionable validity, rather than pay the high legal fees ($2,000,000 or more) to demonstrate in court that the patent is invalid.

