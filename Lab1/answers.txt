
/******************************************************************************
** DAT038, TDA417  Datastrukturer och algoritmer, LP2 2020
** Lab 1: Sorting, Complexity
*******************************************************************************/

Name of lab group: Grupp 50
Group member A:    Ali Alladin
Group member B:    William Hugo
Group member C:    Elias Johansson


/******************************************************************************
** Task: Figuring out the complexity
**
** 1. What is the complexity of running each of the following algorithms
**    on each of the following inputs?
******************************************************************************/

Insertion.java on:

- random inputs:      n^2
- 95% sorted inputs:  n^2
- sorted inputs:      n / n log n

Quick.java on:

- random inputs:      n / n log n
- 95% sorted inputs:  n / n log n
- sorted inputs:      n^2

Merge.java on:

- random inputs:      n / n log n
- 95% sorted inputs:  n / n log n
- sorted inputs:      n / n log n

Arrays.sort on:

- random inputs:      n / n log n
- 95% sorted inputs:  n / n log n
- sorted inputs:      n / n log n


/******************************************************************************
** Task: Improving quicksort
**
** 2. Do the following changes affect the complexity of quicksort
**    on any kind of input data? If so, what is it that changes?
******************************************************************************/

Shuffling the array first:
Yes, it will treat all the arrays as randomly ordered ones which gives always
ensures a linear/logarithmic complexity. Shuffling the array makes it less
probable that the smallest element, which would be the case for sorted arrays,
would be chosen as the pivot. This would make the divide and conquer algorithm
inefficient.


Median-of-three pivot selection:
Yes, it's faster than the original implementation for sorted arrays because
the pivot is now chosen as the median instead of as the smallest element which
makes the divide and conquer more efficient and makes it a linear/logarithmic
complexity.


Insertion sort for small arrays:
No.


/******************************************************************************
** 3. What is a good cutoff to use for insertion sort?
**    Explain briefly how you came to this answer.
**    Remember that you should try to find the answer in a systematic way.
******************************************************************************/

Because we don't know the distribution of the arrays between random, 95% sorted,
and sorted we picked a size where insertion was always faster for all of them.
Te size of the array was somewhere between 30 and 100, the limiting factor were
the random arrays that had a small performance loss at n=100. If random arrays
were not as prevalent as the others insertion sort could be used for even larger
arrays, but to be safe we picked a number slightly smaller than 100: n=80.



/******************************************************************************
** 4. Which combination of improvements gives the best performance?
******************************************************************************/

Median of three and insertion sort.



/******************************************************************************
** Appendix: General information
**
** A. Approximately how many hours did you spend on the assignment?
******************************************************************************/

Ali Alladin:        4
William Hugo:       4
Elias Johansson:    4


/******************************************************************************
** B. Are there any known bugs / limitations?
******************************************************************************/

Not that we are aware of.


/******************************************************************************
** C. Did you collaborate with any other students on this lab?
**    If so, please write in what way you collaborated and with whom.
**    Also include any resources (including the web) that you may
**    may have used in creating your design.
******************************************************************************/

No.


/******************************************************************************
** D. Describe any serious problems you encountered.                    
******************************************************************************/

We didn't encounter any serious problems.


/******************************************************************************
** E. List any other comments here.
**    Feel free to provide any feedback on how much you learned 
**    from doing the assignment, and whether you enjoyed it.                                             
******************************************************************************/

Good way to see implementations of the different algorithms we've learned about,
got a better understanding of complexity.
